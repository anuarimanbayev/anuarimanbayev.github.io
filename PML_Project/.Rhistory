?bind_rows
packageVersions("dplyr")
packageVersion("dplyr")
bind_rows(passed, failed)
sat
submit("script8.R")
?submit
submit("script9.R")
?submit
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment <- update(this_moment, hours=2, minutes=31)
this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with-tz
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
save.image("C:/Users/Anuar Imanbayev/Desktop/DataScienceCourse/DSC_Working_Directory/blank_workspace.RData")
load("C:/Users/Anuar Imanbayev/Desktop/DataScienceCourse/DSC_Working_Directory/blank_workspace.RData")
save.image("C:/Users/Anuar Imanbayev/Desktop/DataScienceCourse/DSC_Working_Directory/.RData")
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q4.R")
w3q3q4()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
?quantile
source("w3q3q5.R")
?quantile
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
install.packages("Hmisc")
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("w3q3q5.R")
w3q3q5()
source("run_analysis.R")
source("plot1.R")
source("plot1.R")
plot1()
source("plot2.R")
source("plot3.R")
source("plot4.R")
source("plot5.R")
source("plot6.R")
source("w4q4q1.R")
w4q4q1()
source("w4q4q1.R")
w4q4q1()
source("w4q4q1.R")
w4q4q1()
source("w4q4q1.R")
w4q4q1()
source("w4q4q1.R")
w4q4q1()
source("w4q4q1.R")
w4q4q1()
source("w4q4q1.R")
w4q4q1()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q2.R")
w4q4q2()
source("w4q4q3.R")
w4q4q3()
source("w4q4q3.R")
w4q4q3()
source("w4q4q3.R")
w4q4q3()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q4.R")
w4q4q4()
source("w4q4q5.R")
w4q4q5()
install.packages(quantmod)
install.packages(quantmod)
install.packages("quantmod")
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q5.R")
w4q4q5()
source("w4q4q4.R")
w4q4q4()
source("manipulate.R")
install.packages("manipulate")
library(manipulate)
source("manipulate.R")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(adData)
View(adData)
View(training)
View(training)
View(testing)
View(trainIndex)
View(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
View(concrete)
qplot(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(predictors)
View(predictors)
iL <- adData["IL",]
View(adData)
View(adData)
View(iL)
View(iL)
iL <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, iL], method = "pca", thresh = 0.8)
preProc$rotation
preProc <- preProcess(training[, iL], method = "pca", thresh = 0.9)
preProc$rotation
preProc <- preProcess(training[, iL], method = "pca", thresh = 0.8)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL
iL <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, iL]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.packages("e1071")
library(e1071)
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
seed(125)
set.seed(125)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
dim(olive)
head(olive)
olive = olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treeModel
newdata <- as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata)
library(ElemStatLearn)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logitModel <- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
logitModel
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(logitModel, trainSA)
predictTest <- predict(logitModel, testSA)
missClass(trainSA$chd, predictTrain)
missClass(testSA$chd, predictTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
dim(vowel.train)
dim(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
install.packages("R.utils")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("corrplot")
setwd("C:/Users/Anuar Imanbayev/Desktop/DataScienceCourse/DSC_Working_Directory/PML_Project")
